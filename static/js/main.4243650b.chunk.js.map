{"version":3,"sources":["reducers.js","NavBar.js","PaymentTable.js","HomePage.js","EditForm.js","actions.js","EditPage.js","AddPage.js","App.js","serviceWorker.js","index.js"],"names":["initialItemsState","lastId","data","id","name","initialPaymentState","combineReducers","items","state","arguments","length","undefined","action","type","concat","Object","toConsumableArray","payments","_action$data","year","month","values","connect","_ref","react_default","a","createElement","Link","to","map","item","index","key","props","console","log","payment","v","HomePage","PaymentTable","EditForm","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleValueChange","bind","assertThisInitialized","handleSubmit","e","rawValue","target","value","parseInt","slice","setState","objectSpread","preventDefault","onEditSubmit","_this2","onSubmit","toString","onChange","Component","dispatch","EditPage","className","src_EditForm","inputItemName","ref","node","store","createStore","reducer","App","es","BrowserRouter","NavBar","Route","path","exact","component","AddPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4243650b.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\nconst initialItemsState = {\n  lastId: 1,\n  data: [{\n    id: 0,\n    name: '電気'\n  }]\n};\n\nconst items = (state = initialItemsState, action) => {\n  switch (action.type) {\n    case 'ADD_ITEM':\n      let { lastId, data } = state;\n      let id = lastId + 1;\n      return {\n        lastId: id,\n        data: [\n          ...state.data,\n          {\n            id,\n            name: action.name \n          }\n        ]\n      };\n  }\n  return state;\n};\n\nconst initialPaymentState = [];\n\nconst payments = (state = initialPaymentState, action) => {\n  switch (action.type) {\n    case 'EDIT_PAYMENT':\n      let { year, month, values } = action.data;\n      return [\n        ...state,\n        {\n          year, month, values\n        }\n      ];\n  }\n  return state;\n};\n\nexport default combineReducers({\n  items, payments\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nconst mapStateToProps = state => ({\n  items: state.items\n});\n\nexport default connect(mapStateToProps)(({ items }) => (\n  <nav>\n    <ul>\n      <li>\n        <Link to=\"/\">ホーム</Link>\n      </li>\n      <li>\n        <Link to=\"/edit\">光熱費入力</Link>\n      </li>\n      <li>\n        光熱費一覧▼\n        <ul>\n          {\n            items.data.map((item, index) => <li key={item.id}>\n              {item.name}\n            </li>)\n          }\n        </ul>\n      </li>\n      <li>\n        <Link to=\"/add\">光熱費追加</Link>\n      </li>\n    </ul>\n  </nav>\n));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nconst HomePage = props => { console.log(props);return(\n  <table>\n    {\n      props.payments.map((payment, index) => (\n        <tr>\n          <td>\n            {props.items.data[index].name}\n          </td>\n          <td>\n            {payment.year} / {payment.month}\n          </td>\n          <td>\n            {payment.values.map(v => <span>{v}</span>)}\n          </td>\n        </tr>\n      ))\n    }\n  </table>\n)};\n\nconst mapStateToProps = state => ({\n  items: state.items,\n  payments: state.payments\n});\n\nexport default connect(\n  mapStateToProps\n)(HomePage);\n","import React, { Component } from 'react';\n\nimport PaymentTable from './PaymentTable';\n\nconst HomePage = props => (\n  <div>\n    <h2>ほーむ</h2>\n    <PaymentTable />\n  </div>\n);\n\nexport default HomePage;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { editPayment } from './actions';\n\nclass EditForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      values: props.items.data.map(() => '')\n    };\n    this.handleValueChange = this.handleValueChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleValueChange(e, id) {\n    let rawValue = e.target.value;\n    let value = parseInt(rawValue);\n    let values = this.state.values.slice();\n    values[id] = rawValue;\n    this.setState({\n      ...this.state,\n      values\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.onEditSubmit(this.state.values);\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <ul>\n          {\n            this.props.items.data.map((item, index) => (\n              <li key={item.id}>\n                <label>\n                  {item.name}\n                  <input name={item.id} type=\"text\"\n                   value={\n                     (this.state.values[item.id] || '').toString()\n                   }\n                   onChange={e => this.handleValueChange(e, item.id)}\n                  />\n                  円\n                </label>\n              </li>\n            ))\n          }\n        </ul>\n        <input type=\"submit\" value=\"保存\" />\n        <input type=\"button\" value=\"戻る\" />\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  items: state.items\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onEditSubmit: values => {\n    dispatch(editPayment({\n      year: 2019,\n      month: 1,\n      values\n    }));\n  }\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(EditForm);\n\n","import { dispatch } from 'redux';\n\nexport const addItem = name => ({\n  type: 'ADD_ITEM', name\n});\n\nexport const editPayment = data => ({\n  type: 'EDIT_PAYMENT', data\n});\n","import React, { Component } from 'react';\n\nimport EditForm from './EditForm';\n\nexport default () => (\n  <div className=\"edit-page\">\n    <h2>光熱費入力</h2>\n    <div>\n      &lt;&lt; 2019年 1月 &gt;&gt;\n    </div>\n    <EditForm />\n  </div>\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addItem } from './actions';\n\nconst AddPage = ({ dispatch }) => {\n  let inputItemName;\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let value = inputItemName.value;\n    if (value.length > 0) dispatch(addItem(inputItemName.value));\n    inputItemName.value = '';\n  };\n\n  return (\n    <div>\n      <h2>光熱費追加</h2>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" ref={node => { inputItemName = node; }} />\n        <input type=\"submit\" value=\"追加\" />\n      </form>\n    </div>\n  )\n};\n\nexport default connect()(AddPage);\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport './App.css';\n\nimport reducer from './reducers';\nimport NavBar from './NavBar';\nimport HomePage from './HomePage';\nimport EditPage from './EditPage';\nimport AddPage from './AddPage';\n\nconst store = createStore(reducer);\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"App\">\n            <NavBar />\n            <Route path=\"/\" exact component={HomePage} />\n            <Route path=\"/edit\" component={EditPage} />\n            <Route path=\"/add\" component={AddPage} />\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}